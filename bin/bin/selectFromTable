#!/bin/tcsh
# Select data from a table... seems straight forward enough
################
# The steps are:
# 1. Initialize
# 2. Set the table name
# 3. Set the column numbers to select
# 4. Set the where clause
# 5. Print the result
################
###############
# 1. Initialize
###############
set noglob
set parameters = `echo $* | sed -e 's/ ,/,/' | sed -e 's/,/, /g'`

if (`echo "$parameters" | grep from|wc -l` != 1) then
    $MACSQL_HOME/bin/help `basename $0`
    exit $status
endif
#############################
# 2. Start set the table name
#############################
set setTable = 0
set count = 0
set numFields = `echo $* | awk '{print NF}'`
while ($count < $numFields)
    @ count++
    if ("$parameters[$count]" == "from") then
	set setTable = 1
    else if ($setTable == 1) then
	set setTable = 0
	set table = $MACSQL_HOME/db/data/$parameters[$count]
	set tabdef = $MACSQL_HOME/db/tables/$parameters[$count]
    endif
end

# if the user is selecting from all_tables then create the all_tables table for the user.

if (`basename $tabdef` == all_tables) then
    if (-f $MACSQL_HOME/db/tables/all_tables) then
	rm $MACSQL_HOME/db/tables/all_tables
    endif
    if (-f $MACSQL_HOME/db/data/all_tables) then
	rm $MACSQL_HOME/db/data/all_tables
    endif
    create table all_tables \(table_name varchar2\(256\), owner varchar2\(256\)\)
    foreach file (`ls $MACSQL_HOME/db/tables`)
	insert into all_tables values \(\"$file\" , \"`ls -l $MACSQL_HOME/db/tables/$file | awk '{print $3}'`\"\)
    end
endif
   
set fields = `cat $tabdef`
if (! -s $table) then
    set flag = 0
    foreach field ($fields)
	if ($flag == 0) then
	    set field = `echo $field|sed -e 's/(//' | sed -e 's/)//'`
	    echo -n $field' '
	    set flag = 1
	else
	    set flag = 0
	endif
    end
    if ($table == $MACSQL_HOME/db/data/dual) then
	if ($parameters[1] == sysdate) then
	   echo SYSDATE
	   echo '-------'
	   $MACSQL_HOME/bin/bin/getDate | awk -F"." '{print $4,$5,$6,$2,$3,$7}'
	else if ($parameters[1] == *) then
	   echo D
	   echo \-
	   echo X
	else if ($parameters[1] == count\(*\)) then
	    echo COUNT\(*\)
	    echo --------
	    echo 1
	else
	    echo $parameters[1] | awk '{printf("%s\n----------------\n%s\n\n",toupper($1),$1)}'
	endif   
    else
	echo ''
    endif
    exit 0
endif
#echo table name is $table
#set x = $<
########################
# End set the table name
########################

###########################################
# 3. Start set the column numbers to select
###########################################
set def = `tail -1 $tabdef`
set numCols = `echo $def|awk -F"," '{print NF}'`
set columns = 
set value = 
set sumIt = 0
set minIt = 0
set maxIt = 0
set datetimeField = 0
set foundDistinct = 0
if ($parameters[1] == *) then
    set columnCounter = 0
    while ($columnCounter < $numCols)
	@ columnCounter++
	if ("$columns" == "") then
	    set columns = \$$columnCounter
	else
	    set columns = $columns,\$$columnCounter
	endif
    end
    set parameters = `echo $parameters | sed -e s/*/$columns/`
else
    set count = 1
    set foundDistinct = `echo $parameters | sed -e s/\(/\ /g | grep -w %distinct%|wc -l`
    if ($foundDistinct == 1) then
	set parameters = `echo $parameters | sed -e 's/%distinct%//'`
    endif
    
    while ("$parameters[$count]" != "from")
	set value = `echo $parameters[$count] | sed -e 's/,//'`
	set foundSum = `echo $value | sed -e s/\(/\ /g | grep -w sum|wc -l`
	set foundMin = `echo $value | sed -e s/\(/\ /g | grep -w min|wc -l`
	set foundMax = `echo $value | sed -e s/\(/\ /g | grep -w max|wc -l`
	if ($foundSum == 1) then
	    set len = `echo $value | awk '{print length}'`
	    set sumValue = `echo $value $len | awk '{print substr($1,5,($2-1))}'`
	    set sumValue = `echo $sumValue|sed -e 's/)//'`
	    set value = $sumValue
	    set sumIt = 1
	endif
	if ($foundMin == 1) then
	    set len = `echo $value | awk '{print length}'`
	    set minValue = `echo $value $len | awk '{print substr($1,5,($2-1))}'`
	    set minValue = `echo $minValue|sed -e 's/)//'`
	    set value = $minValue
	    set minIt = 1
	endif
	if ($foundMax == 1) then
	    set len = `echo $value | awk '{print length}'`
	    set maxValue = `echo $value $len | awk '{print substr($1,5,($2-1))}'`
	    set maxValue = `echo $maxValue|sed -e 's/)//'`
	    set value = $maxValue
	    set maxIt = 1
	endif
	set defCnt = 0
	set found = 0
	while ($defCnt < $numCols)
	    @ defCnt++
	    set tVal = `echo $def,$defCnt|awk -F"," '{print $($NF)}'`
	    set typeVal = `echo $tVal | awk '{print $2}' | grep datetime | wc -l`
	    set tVal = `echo $tVal | awk '{print $1}'|sed -e s/\(//`
	    if ("$tVal" == "$value") then
		set found = 1
		if ($typeVal == 0) then
		    if ($columns == ) then
			set columns = \$$defCnt
		    else
			set columns = $columns,\$$defCnt
		    endif
		endif
		if ($typeVal == 1) then
		    if ($columns == ) then
			set columns = substr\(\$$defCnt,23,15\)
		    else
			set columns = $columns,substr\(\$$defCnt,23,15\)
		    endif
		endif
		set tVal = `echo $def,$defCnt|awk -F"," '{print $($NF)}' | awk '{print $NF}'`
		set tVal = `echo $tVal | sed -e 's/(/ /' | awk '{print $1}'`
		if ($tVal == datetime) then
		    set datetimeField = 1
		endif
	    endif
	end
	if ($found == 0 && $value != %count%) then
	    echo \($value\) not found
	    $MACSQL_HOME/bin/help `basename $0`
	    exit $status
	endif
	@ count++
    end
endif
#echo columns to select are\: $columns
#set x = $<
######################################
# end set the column numbers to select
######################################

###############################
# 4. Start set the where clause
###############################
set whereParms = `echo $parameters | awk -F"order by" '{print $1}' | awk -F"from" '{print $2}'`
#$MACSQL_HOME/bin/bin/setWhere $whereParms
set where = `$MACSQL_HOME/bin/bin/setWhere $whereParms`
if ($status != 0) then
    $MACSQL_HOME/bin/help select `basename $table`
    exit $status
endif
#echo where is $where
##########################
# End set the where clause
##########################

###########################
# 5. Start Print the result
###########################
if (`echo $parameters | grep %count% | wc -l` == 1) then
    set columns = count
endif
if (`echo $parameters | grep " order by"|wc -l` == 1) then
    set sortCol = `echo $parameters | awk -F"order by" '{print $2}' | awk '{print $1}'`
    set ascdesc = `echo $parameters | awk -F"order by" '{print $2}' | awk '{print $2}'`
    if ($ascdesc == desc || $ascdesc == descending) then
	set ascdesc = -r
    else
	set ascdesc = 
    endif
    set fields = `echo $fields|sed -e 's/(//g' | sed -e 's/)//g'`

#   set the sort parameter to either -n or null based on date type.
    set isInt = 0
    set colCounter = 0
    set dashn = 
    if ($argv[1] == *) then
	set numFields = `cat $tabdef | awk -F"," '{print NF}'`
    else
	set numFields = `echo $* | awk -F"," '{print NF}'`
    endif
    while ($colCounter < $numFields)
	@ colCounter++
	set curCol = `echo $fields | awk -F"," \{print\ \$$colCounter\}`
	if ($curCol[1] == $sortCol) then
	    if ($curCol[2] == float || $curCol[2] == datetime) then
		set dashn = \-n
	    endif
	endif
    end

    set cols = `cat $tabdef | awk -F"," '{print NF}'`
    set counter = 0
else
    set catSort = cat
    set sortCol = 
endif
if ($sumIt == 1 && $foundDistinct == 1) then
    goto sumDistinctRows
else if ($sumIt == 1) then
    goto sumRows
else
    if ($maxIt == 1) then
	if ($datetimeField == 1) then
	    cat ../db/data/$table | awk -F"," "{if ($where) print $columns}"|sed -e 's/%20/ /g' | sort -n -r | head -1 | awk -F"." '{print $4,$5,$6,$7,$2,$3}'
	else
	    cat $table | awk -F"," "{if ($where) print $columns}"|sed -e 's/%20/ /g' | sort -n -r | head -1
	endif
    else if ($minIt == 1) then
	if ($datetimeField == 1) then
	    cat $table | awk -F"," "{if ($where) print $columns}"|sed -e 's/%20/ /g' | sort -n | head -1 | awk -F"." '{print $4,$5,$6,$7,$2,$3}'
	else
	    cat $table | awk -F"," "{if ($where) print $columns}"|sed -e 's/%20/ /g' | sort -n | head -1
	endif
    else if ($columns == count) then
	cat $table | awk -F"," "BEGIN {count=0}{if ($where) count++} END {print $columns}"
    else if ($foundDistinct == 1) then
	if ($datetimeField == 1) then
	    cat $table | awk -F"," "{if ($where) print $columns}" | sort -n | uniq | awk -F"." '{print $4,$5,$6,$2,$3,$7}'
	else
	    cat $table | awk -F"," "{if ($where) print $columns}"|sed -e 's/%20/ /g' | sort -n | uniq
	endif
    else
	set cnum = 1
	set kNum = 
	if ($sortCol != ) then
	    while ($parameters[$cnum] != from)
		set param = `echo $parameters[$cnum]|sed -e 's/,//'`
		if ($param == $sortCol) then
		    if ($kNum == ) then
			set kNum = $cnum
		    else
			set kNum = $kNum, $cnum
		    endif
		endif
		@ cnum++
	    end
	    cat $table | awk -F"," "{if ($where) print $columns}" | sort -n -k $kNum $ascdesc
	else
	    cat $table | awk -F"," "{if ($where) print $columns}"
	endif
    endif
endif
exit 0
######################
# End Print the result
######################

##############################
# functions for sum and errors
##############################
sumRows:
	set pos = `cat $table | awk -F"," "{if ($where) print $columns}" | grep -v '\-' | awk 'BEGIN {print 0}{printf("%.2f+\n",$0)} END {printf("%s\n","p")}' | dc`
	set neg = `cat $table | awk -F"," "{if ($where) print $columns}" | grep '\-' | awk 'BEGIN {print 0}{printf("%.2f+\n",$0)} END {printf("%s\n","p")}'|sed -e 's/\-//' | dc`
	set tot = `echo $pos $neg - p | dc`
	echo $tot
	exit 0
sumDistinctRows:
	set pos = `cat $table | awk -F"," "{if ($where) print $columns}" | grep -v '\-' | awk 'BEGIN {print 0}{printf("%.2f+\n",$0)} END {printf("%s\n","p")}' | sort | uniq | dc`
	set neg = `cat $table | awk -F"," "{if ($where) print $columns}" | grep '\-' | awk 'BEGIN {print 0}{printf("%.2f+\n",$0)} END {printf("%s\n","p")}' | sed -e 's/\-//' | sort | uniq | dc`
	set tot = `echo $pos $neg - p | dc`
	echo $tot
	exit 0
