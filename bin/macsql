#!/bin/tcsh
# open a data base
set noglob
cd $MACSQL_HOME/bin
set parameters = ""
set parameterCount = $#
set counter = 0
#pwd
while  ($counter < $parameterCount)
    @ counter++
    if ($parameters == ) then
	set parameters = $argv[$counter]
    else
	set parameters = $parameters" "$argv[$counter]
    endif
end
#echo Entering sql $0 Parameters are: $parameters
set bangbang = ""
#./backup
while (1)
    echo -n SQL\>\ 
    set localParameters = `echo $<`
    if ("$localParameters" == "") then
	set localParameters = "$bangbang"
	continue
    endif
    if ("$localParameters" == "/") then
	set localParameters = "$bangbang"
    endif
    set localParameters = `echo $localParameters | sed -e 's/,/, /g'`
    set bangDLoc = `echo $localParameters | awk '{print NF}'`
# seeSlash is a play on words for c/old/new
    set seeSlash = `echo $localParameters | awk '{print substr($0,1,2)}'`
##############################################
## start odd, but possibly required code block
##############################################
    set firstbb = 0
    if (`echo $localParameters[$bangDLoc]| awk '{print length}'` > 0) then
# for now just handle the case of os command parameters starting with a dash.
# this is important piece of the puzzle.  Not sure what to do with this for 
# macsql commands.  This will need some thought someday, for now its not an
# issue
	set bb = $localParameters[$bangDLoc]
	set firstbb = `echo $bb | awk '{print substr($0,1,1)}'`
	if ((! -f $localParameters[1]) && ($firstbb == -)) then
	    set firstbb = 1
	else
	    set firstbb = 0
	endif
    endif
##############################################
## end odd, but possibly required code block
##############################################
    if ($firstbb == 0) then
	if ("$localParameters" != "/" && "$seeSlash" != "c/" && "$bangbang" != "" && $localParameters[$bangDLoc] == \!\$) then
	    set removeBangD = 1
	    set newLocal = 
	    while ($removeBangD < $bangDLoc)
		if ("$newLocal" == "") then
		    set newLocal = $localParameters[$removeBangD]
		else
		    set newLocal = "$newLocal $localParameters[$removeBangD]"
		endif
		@ removeBangD++
	    end
	    set newBangD = `echo $bangbang | awk '{print NF}'`
	    set newBangD = `echo $bangbang $newBangD | awk '{print $($NF)}'`
	    set newLocal = `echo $newLocal $newBangD`
	    set localParameters = "$newLocal"
	endif
    endif
    if ($firstbb == 0 && "$localParameters" == "/") then
	if ("$bangbang" == "") then
	    continue
	else
	    set localParameters = `echo $bangbang`
	endif
    else if (`echo $localParameters | awk '{print substr($1,1,2)}'` == \!\! && `echo $localParameters | awk '{print substr($1,3,2)}'` != \:s && `echo $localParameters | awk '{print substr($1,3,2)}'` != \:p) then
	if ("$bangbang" == "") then
	    continue
	endif
	set nf = `echo $localParameters | awk '{print NF}'`
	set counter = 2
	set finalParms = ""
	while ($counter <= $nf)
	    set newParm = `echo $localParameters $counter | awk '{print $($NF)}'`
	    set finalParms = "$finalParms $newParm"
	    @ counter++
	end
	set localParameters = `echo $bangbang $finalParms`
    else if (`echo $localParameters | awk '{print substr($1,1,1)}'` == \!|| `echo $localParameters | awk '{print substr($1,2,1)}'` == \/ || "$localParameters" == l) then
	if (`echo $localParameters | awk '{print substr($1,1,4)}'` == \!\!\:p|| "$localParameters" == l) then
	    echo $bangbang
	    continue
	else if (`echo $localParameters | awk '{print substr($1,1,4)}'` == \!\!\:s||`echo $localParameters | awk '{print substr($1,1,2)}'` == c\/) then
	    set from = `echo $localParameters | awk -F"/" '{print $2}'|sed -e 's/\*/\\\*/'`
	    set to = `echo $localParameters | awk -F"/" '{print $3}'|sed -e 's/\*/\\\*/'`
	    set localParameters = `echo $bangbang | sed -e "s/$from/$to/"`
	else if (`echo $localParameters | awk '{print substr($1,3,1)}'` == \:) then
	    set localParameters = `echo $bangbang`
	    continue
	else
	    $MACSQL_HOME/bin/history $localParameters
	    set tVal = `tail -1 ../db/history.dat`
	    set tLen = `echo $tVal | awk '{print NF}'`
	    set ntVal = 
	    set ntLen = 1
	    while ($ntLen < $tLen)
		@ ntLen++
		if ("$ntVal" == ) then
		    set ntVal = $tVal[$ntLen]
		else
		    set ntVal = "$ntVal $tVal[$ntLen]"
		endif
	    end
	    set bangbang = "$ntVal"
	    continue
	endif
    endif
    set localParameters = "$localParameters"
    if ("$localParameters" == quit) then
	cd $MACSQL_HOME/db
	./reset.history.tcsh
	cd $MACSQL_HOME/bin
	#./backup
	exit 0
    endif
    set scr = `echo $localParameters|awk '{print $1}'`
    set bang = 0
#    if ($scr == update||$scr == delete) then
#	$MACSQL_HOME/bin/backup
#    endif
    if (-f $MACSQL_HOME/bin/$scr) then
	$MACSQL_HOME/bin/$localParameters
	if ($status == 0) then
#	echo 2. history
	    $MACSQL_HOME/bin/history $localParameters
	    set bang = 1
#	    if ($scr == insert) then
#		$MACSQL_HOME/bin/backup
#	    endif

#	else
#	    set bang = 1
	endif
    else if ("$localParameters" == "\!\!\:p") then
	set localParameters = `echo $bangbang`
    else
	unset noglob
	$localParameters
	if ($status == 0) then
	    set noglob
#	echo 3. history
	    $MACSQL_HOME/bin/history $localParameters
	    set bang = 1
	else    
	    set noglob
	endif
    endif
    if ($bang == 1) then
	set bangbang = "$localParameters"
    endif
end
